/**
 * Object wrapper for raw Google location JSON response
 * Supports checking if info is valid,
 * updating the location info,
 * retrieving info in english
 * retrieving coords as simple array
 **/
function Location(t){if(!(this instanceof Location))throw new TypeError("Location constructor cannot be called as a function.")
this.setLocation(t)}Location.isGoogleObject=function(t){return"object"==typeof t&&"address_components"in t&&"formatted_address"in t&&"geometry"in t&&"location"in t.geometry},Location.prototype.setLocation=function(t){return Location.isGoogleObject(t)?(this.data=t,!0):!1},Location.prototype.isset=function(){return null!==this.data},Location.prototype._types={number:"street_number",street:"route",city:"locality",county:"administrative_area_level_2",state:"administrative_area_level_1",country:"country",zip:"postal_code"},Location.prototype.get=function(t,e){if(null!==this.data)switch(t){case"location":return this.data
case"address":return this.data.formatted_address
case"street_address":return this.get("number")?this.get("number")+" "+this.get("street"):this.get("street")
case"coords":return this._coords()
case"radius":return"radius"in this.data?this.data.radius:10
case"name":return this.data.name
case"phone":return this.data.formatted_phone_number
case"phone_intl":return this.data.international_phone_number
case"website":return this.data.website
case"gplus":return this.data.url
case"icon":return this.data.icon
default:for(var a in this.data.address_components)for(var o in this.data.address_components[a].types)if(this._types[t]==this.data.address_components[a].types[o])return _.isEmpty(e)?this.data.address_components[a].long_name:this.data.address_components[a].short_name}return!1},Location.prototype._coords=function(){var t=Object.keys(this.data.geometry.location)
return{lat:this.data.geometry.location[t[0]],lng:this.data.geometry.location[t[1]]}}
